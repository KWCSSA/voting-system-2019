<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>KWCSSA Voting 2019</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css"
    integrity="sha384-WskhaSGFgHYWDcbwN70/dfYBj47jz9qbsMId/iRN3ewGhXQFZCSftd1LZCfmhktB" crossorigin="anonymous">
  <script src="https://code.jquery.com/jquery-3.4.1.min.js"
    integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart.min.js"></script>
  <style>
    .wrapper {
      height: 100vh;
      width: 100vw;
      display: flex;
      align-items: center;
      flex-direction: column;

    }

    canvas {
      width: 80vw !important;
      height: 80vh !important;
      margin-left: auto;
      margin-right: auto;
      background-color: black;
    }

    body {
      background-color: black;
    }

    #title {
      color: orange;
      text-align: center;
    }

    text {
      text-color: white;
    }

    .banner {
      height: 15vh;
    }
  </style>
  <script type="text/javascript">
    var displayedCandidates = [];
    var displayedVotes = [];
    var plotCandidates = [];
    var plotVotes = [];
    var chartCreated = false;
    var plotColors = [];

    var votingChart;

    const font_size = 30;
    const font_family = "Calibri";

    function getAllDisplayedCandidates(cb) {
      $.ajax({
        method: 'GET',
        url: '/displaycandidates'
      }).done(data => {
        if (JSON.stringify(displayedCandidates) !== JSON.stringify(data)) {
          displayedCandidates = data;
          cb();
        }
      })
    }

    function updateCandidates() {
      $.ajax({
        method: 'GET',
        url: '/candidates'
      }).done(data => {
        displayedVotes = [];
        plotCandidates = [];
        plotVotes = [];
        plotColors = [];
        for (var i = 0; i < data.length; i++) {
          var match = data[i]["id"] + "-" + data[i]["name"];
          for (var j = 0; j < displayedCandidates.length; j++) {
            if (match === displayedCandidates[j]) {
              var added = false;
              for (var k = 0; k < displayedVotes.length; k++) {
                if (displayedVotes[k] && displayedVotes[k]["name"] == data[i]["name"]) {
                  added = true;
                  plotVotes[k] = data[k]["vote"];
                }
              }

              if (added === false) {
                displayedVotes.push(data[i]);
                plotCandidates.push(data[i]["id"] + ' ' + data[i]["name"]);
                plotVotes.push(data[i]["vote"]);
                plotColors.push('lightblue');
              }
            }
          }
        }
      }).done(() => {
        /*if (chartCreated == false) {*/
        chartCreated = true;
        Chart.defaults.global.defaultFontFamily = font_family;
        Chart.defaults.global.defaultFontColor = '#fff';
        //Chart.defaults.global.defaultFontSize = '20px';
        Chart.defaults.global.defaultFontStyle = 'bold';
        Chart.defaults.global.tooltips.enabled = false;
        votingChart = new Chart(document.getElementById("bar-chart"), {
          type: 'bar',
          data: {
            labels: plotCandidates,
            datasets: [
              {
                label: "票数",
                data: plotVotes,
                backgroundColor: plotColors
              }
            ]
          },
          options: {
            events: [],
            legend: {
              display: false,
              labels: {
                fontFamily: "Arial",
              }
            },
            title: {
              display: false,
              text: '投票结果'
            },
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              xAxes: [{
                gridLines: {
                  display: false
                },
                ticks: {
                  fontSize: font_size
                }
              }],
              yAxes: [{
                gridLines: {
                  drawBorder: false,
                  display: false
                },
                ticks: {
                  display: false,
                  suggestedMax: Math.max(...plotVotes) * 1.5
                },
                beginAtZero: true,
              }]
            },
            animation: {
              onComplete: function () {
                var chartInstance = this.chart;
                var ctx = chartInstance.ctx;
                var height = chartInstance.controller.boxes[0].bottom;
                ctx.textAlign = "center";
                Chart.helpers.each(this.data.datasets.forEach(function (dataset, i) {
                  var meta = chartInstance.controller.getDatasetMeta(i);
                  Chart.helpers.each(meta.data.forEach(function (bar, index) {
                    ctx.font = "30px Arial";
                    ctx.fillStyle = "white";
                    ctx.fillText(dataset.data[index], bar._model.x, bar._model.y - 20);
                  }), this)
                }), this);
              }
            }
          }
        });
        /*} else {
          console.log(displayedVotes, plotCandidates, plotVotes);
          updateChart(votingChart, plotVotes);
        }*/
      });
    }

    function updateChart(chart, data) {
      chart.update();
    }

    setInterval(() => {
      getAllDisplayedCandidates(updateCandidates);
    }, 100);

  </script>
</head>

<body>
  <div class="wrapper">
    <image class="banner" src="/banner.jpg" alt="logo" />
    {{!-- <div id="chart-container" style="position: relative; width: 1000; height: 1000;"> --}}
    <canvas id="bar-chart"></canvas>
  </div>
  {{!-- </div> --}}
</body>

</html>